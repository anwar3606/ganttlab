stages:
  - build
  - deploy

.stage_image_cache_beforeScript_artifacts_webapp: &stage_image_cache_beforeScript_artifacts_webapp
  stage: build
  image: node:12
  cache:
    paths:
    - node_modules/
    - .yarn
  before_script:
    - yarn install
  artifacts:
    paths:
      - packages/ganttlab-adapter-webapp/dist

webapp:gtm:
  <<: *stage_image_cache_beforeScript_artifacts_webapp
  script:
    - export VUE_APP_GTM_CONTAINER_ID="${GTM_CONTAINER_ID}"
    - yarn run build:webapp
  only:
    - master

webapp:
  <<: *stage_image_cache_beforeScript_artifacts_webapp
  script:
    - yarn run build:webapp

sonarcloud:
  stage: build
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner

.stage_image_dependencies_script_only_aws: &stage_image_dependencies_script_only_aws
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: ["/bin/bash", "-l", "-c"]
  dependencies:
    - webapp:gtm
  script:
    - THE_S3_BUCKET="${THE_STACK_NAME}"
    # create/update the deployment CloudFormation stack
    - aws cloudformation deploy --stack-name ${THE_STACK_NAME} --template-file devops/deploy/AWS/CloudFormation/stack.yaml --tags billing-project=${BILLING_PROJECT} --parameter-overrides DomainName=${DOMAIN_NAME} ZoneName=${ZONE_NAME}
    - aws cloudformation update-termination-protection --enable-termination-protection --stack-name ${THE_STACK_NAME}
    # sync (with deletion) the built website from the artifacts of former pipeline stage right into the S3 bucket
    - aws s3 sync packages/ganttlab-adapter-webapp/dist/ "s3://${THE_S3_BUCKET}" --delete
    # invalidate /index.html from CloudFront for users to get the latest version straight away
    - CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stack-resource --stack-name ${THE_STACK_NAME} --logical-resource-id CloudFrontDistribution | grep PhysicalResourceId | cut -d \" -f4)
    - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /index.html
  only:
    - master

AWS-dot-org:
  <<: *stage_image_dependencies_script_only_aws
  variables:
    THE_STACK_NAME: "app-dot-ganttlab-dot-org-production"
    BILLING_PROJECT: "app-dot-ganttlab-dot-org"
    DOMAIN_NAME: "app.ganttlab.org"
    ZONE_NAME: "ganttlab.org"
  environment:
    name: app.ganttlab.org
    url: https://app.ganttlab.org/

AWS-dot-com:
  <<: *stage_image_dependencies_script_only_aws
  variables:
    THE_STACK_NAME: "app-dot-ganttlab-dot-com-production"
    BILLING_PROJECT: "app-dot-ganttlab-dot-com"
    DOMAIN_NAME: "app.ganttlab.com"
    ZONE_NAME: "ganttlab.com"
  environment:
    name: app.ganttlab.com
    url: https://app.ganttlab.com/

DockerHub:
  stage: deploy
  image: docker:git
  dependencies:
    - webapp
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker info
    - docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}" docker.io
    - docker build -f devops/deploy/DockerHub/Dockerfile -t "ganttlab/ganttlab:latest" .
    - docker push index.docker.io/ganttlab/ganttlab:latest
  only:
    - master